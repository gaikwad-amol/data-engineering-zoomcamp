services:
  
  pgdatabase:
    container_name: pgdatabase
    image: postgres:13
    environment:
      POSTGRES_DB: # Setting this variable helps to create the database with the name provided
      POSTGRES_USER: 
      POSTGRES_PASSWORD:
      UID:
      GID:
    env_file:
      - .env
    volumes:
      - ./ny_taxi_data:/var/lib/postgresql/data # This is to persist the data in the host machine
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d ny_taxi -U data"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    user: "${UID}:${GID}" # This takes the UID and GID from the .env file which are taken from host machine and same user is  
                          # created in the container to avoid permission issues of the mounted volume
    networks:
      - pg-network
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - "8080:80"
    networks:
      - pg-network
    depends_on:
      pgdatabase:
        condition: service_healthy

  data_ingestion_pipeline:
    container_name: data_ingestion_pipeline
    build:
      context: .
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
        POSTGRES_PORT: ${POSTGRES_PORT}
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          memory: 1G  # Adjust memory limit as needed
          cpus: "1"
        reservations:
          memory: 1G  # Adjust memory reservation as needed
    ports:
      - "8081:8081"
    env_file:
      - .env
    networks:
      - pg-network
    depends_on:
      pgdatabase:
        condition: service_healthy
    

networks:
  pg-network:
    driver: bridge

